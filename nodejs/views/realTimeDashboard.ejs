<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real time Dashboard - SystemWatch </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="/static/dashboard_style.css" rel="stylesheet" >

</head>
<body>
    <div class="container-fluid" id="container">
        <div class="row">
            <div class="col-3 d-flex flex-column flex-shrink-0 p-3 text-white bg-dark">
                <div class="sidebar-header">
                    <h3>Options</h3>
                </div>
                <form autocomplete="off">
                    <div>
                        <div class="form-check form-switch">
                            <label class="form-check-label" for="cpuload">Display CPU load</label>
                            <input class="form-check-input" checked data-bs-toggle="collapse" data-bs-target="#cpuUsageContainer" aria-expanded="false" aria-controls="cpuUsageContainer" type="checkbox" id="cpuload" name="cpuload" >
                        </div>
                    </div>
                    <div>
                        <div class="form-check form-switch">
                            <label class="form-check-label" for="displaycputemp">Display the CPU temperature</label>
                            <input class="form-check-input" checked data-bs-toggle="collapse" data-bs-target=".temperature-option" aria-expanded="false" aria-controls="coreTemperatureOption temperature"  type="checkbox" id="displaycputemp" name="displaycputemp" >
                        </div>
                        <div class="form-check form-switch collapse temperature-option show" id="coreTemperatureOption">
                            <div class="form-check form-switch">
                                <label class="form-check-label" for="coretemp">Display temperature of each core</label>
                                <input class="form-check-input" data-bs-toggle="collapse" data-bs-target=".coreTemperatureOption" aria-expanded="false" aria-controls="cpuTempContainer coreTempContainer temperatureDisplayTypeOption" type="checkbox" name="coretemp" id="coretemp">
                            </div>
                            
                            <div class="form-check form-switch collapse coreTemperatureOption show" id="temperatureDisplayTypeOption">
                                <button class="btn dropdown-toggle btn-primary btn-sm" id="displayDropdownButton" data-bs-toggle="dropdown" aria-expanded="false">Change display type</button>
                                <ul class="dropdown-menu" aria-labelledby="displayDropdownButton">
                                    <li><a class="dropdown-item" href="#" onclick="setVisibility('cpuTempGaugeContainer', true); setVisibility('cpuTempLineChartContainer', false);">Gauge Chart</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="setVisibility('cpuTempGaugeContainer', false); setVisibility('cpuTempLineChartContainer', true);">Line Chart</a></li>
                                </ul>
                            </div>
                        </div>
                        
                    </div>
                    <div>
                        <div class="form-check form-switch">
                            <label class="form-check-label"  for="ramusage">Display RAM usage</label>
                            <input class="form-check-input" checked data-bs-toggle="collapse" data-bs-target="#ramUsageContainer" aria-expanded="false" aria-controls="ramUsageContainer" type="checkbox" name="ramusage" id="ramusage" checked>
                        </div>
                    </div>
                </form>
                
            </div>
            <div class="col-9 drag-list">
                <h1 class="col-sm" style="min-height: 15vh; line-height: 7vh; text-align: center;"><%= computer.computerName %></h1>
                <div class="row">
                    <div class="col-sm drag-item" draggable="true">
                        <div class="collapse show"  id="cpuUsageContainer">
                            <div id="cpuUsageCanvas" class="canvas"></div>
                        </div>
                    </div>
                    
                    <div class="col-sm drag-item" draggable="true">
                        <div class="temperature-option collapse show"  id="temperature">
                            <div class="collapse coreTemperatureOption show" id="cpuTempContainer">
                                <div class="collapse" id="cpuTempLineChartContainer">
                                    <div id="cpuTempCanvas" class="canvas"></div>
                                </div>
                                <div class="collapse show" id="cpuTempGaugeContainer">
                                    <div id="cpuTempGaugeCanvas" class="canvas"></div>
                                </div>
                            </div>
                            
                            <div class="collapse coreTemperatureOption" id="coreTempContainer">
                                <div id="coreTempCanvas" class="canvas"></div>
                            </div>
                        </div>
                    </div>
                    
                </div>
                
                <div class="col-sm drag-item" draggable="true">
                    <div class="collapse show" id="ramUsageContainer">
                        <div id="ramUsageCanvas" class="canvas"></div>
                        <div class="d-flex flex-row justify-content-center">
                            <div class="p-2">
                                <h5>
                                    In use
                                </h5>
                                <span id="usedRAM">
                                    
                                </span>
                            </div>
                            <div class="p-2">
                                <h5>
                                    Available
                                </h5>
                                <span id="availableRAM">
                                    
                                </span>
                            </div>
                        </div>
                    </div>
                    
                    
                </div>
                <div class="col-sm" id="cpuGeneralContainer">
    
                </div>
                <div class="col-sm" id="cpuGeneralContainer">
    
                </div>
                <div class="col-sm" id="gpuTempContainer">
                </div>

                <div style="display: none;" id="guideChartContainer">
                    <div id="guideChart" class="canvas"></div>
                </div>

        <%- include('../partials/footer'); %>

            </div>
        </div>
    </div>
</body>

<!-- On importe SocketIO, Axios et Chart.js -->
<script src="https://cdn.socket.io/4.4.1/socket.io.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://cdn.plot.ly/plotly-2.16.5.js" charset="utf-8"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

<!-- On importe tous les éléments à afficher -->
<script src="/static/dashboardUtils.js"></script>
<script src="/static/charts/Display.js"></script>
<script src="/static/charts/CpuTemperatureLineChart.js"></script>
<script src="/static/charts/CoreTemperatureLineChart.js"></script>
<script src="/static/charts/CpuTemperatureGauge.js"></script>
<script src="/static/charts/CpuUsageLineChart.js"></script>
<script src="/static/charts/RamUsageLineChart.js"></script>
<script src="/static/charts/GuideLineChart.js"></script>
<script src="/static/dragNdropUtils.js"></script>

<script>
    const socketHost = "<%= socketHost %>:<%= listenPort %>"
    const computer = JSON.parse('<%- JSON.stringify(computer) %>')
    const socket = io(`${socketHost}?computerID=${computer.computerID}`)
    const charts = []

    // CPU Temperature line chart
    const cpuTempsLineChart = new CpuTemperatureLineChart("cpuTempLineChartContainer", computer.cores)

    // CPU Temperature gauge chart 
    const cpuTempsGaugeChart = new CpuTemperatureGaugeChart("cpuTempGaugeContainer", computer.cores)

    // Core Temperatures line chart
    const coreTempsLineChart = new CoreTemperatureLineChart("coreTempContainer", computer.cores)

    // CPU Usage line chart
    const cpuUsageLineChart = new CpuUsageLineChart("cpuUsageContainer", computer.cores)

    // RAM Usage Line chart : 
    const ramUsageLineChart = new RamUsageLineChart("ramUsageContainer", computer.amountRAM)

    // Guide Line chart : 
    const guideLineChart = new GuideLineChart("guideChartContainer")

    // Getting existing Data : 
    getDataFromDatabase("corestatus").then((receivedCoreStatusData) => {
        for(let corestatus of receivedCoreStatusData){
            cpuTempsLineChart.push(corestatus)
            coreTempsLineChart.push(corestatus)
            cpuTempsGaugeChart.push(corestatus)
            cpuUsageLineChart.push(corestatus)
        }
    })
    getDataFromDatabase("monitor").then((receivedMonitorData) => {
        for(let monitor of receivedMonitorData){
            ramUsageLineChart.push(monitor)
            guideLineChart.push()
        }
    });

    // Synchronizing linecharts : 
    let lineCharts = [guideLineChart, cpuUsageLineChart, ramUsageLineChart, coreTempsLineChart, cpuTempsLineChart];
    let plots = []

    lineCharts.forEach((d)=>{
        plots.push(document.querySelector("#"+d.graphId))
    })

    let updating = false;
    plots[0].on("plotly_redraw", function(ed){
        let range = plots[0].layout.xaxis.range
        let newRange = [range[0]+ 1, range[1] + 1]
        for(let plot of plots){
            Plotly.relayout(plot, {xaxis:{range: newRange}})
        }
    })

    plots.forEach(div => {
        div.on("plotly_relayout", async function(ed) {
            if (updating) {
                return;
            }
            updating = true;
            const dimensions = {
                "xaxis.range[0]" : ed["xaxis.range[0]"],
                "xaxis.range[1]" : ed["xaxis.range[1]"]
            } 
            for(let p of plots){
                if(ed["dragmode"] !== undefined){
                    await Plotly.relayout(p, ed);
                } else if(ed["xaxis.range[0]"] !== undefined) {
                    await Plotly.relayout(p, dimensions);
                } else {
                    return;
                }
            }
            updating = false;
        });
    });

    // Socket Connection
    socket.on("welcome", function(data) {
        console.log("Connection made");
    })

    socket.on("corestatuschannel", function(data){
        const corestatus = JSON.parse(data);

        cpuTempsLineChart.push(corestatus)
        coreTempsLineChart.push(corestatus)
        cpuTempsGaugeChart.push(corestatus)
        cpuUsageLineChart.push(corestatus)

        // TODO: Display GPU Usage
    })

    socket.on("monitorchannel", async function(data){
        // TODO: What to do when a new monitor is received
        const monitor = JSON.parse(data);
        ramUsageLineChart.push(monitor)
        guideLineChart.push()
    })
</script>
</html>