<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real time Dashboard - SystemWatch </title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
</head>
<body>
    <div class="container-fluid" id="container">
        <div class="row">
            <div class="col-3 d-flex flex-column flex-shrink-0 p-3 text-white bg-dark">
                <div class="sidebar-header">
                    <h3>Options</h3>
                </div>
                <div>
                    <div>
                        <label for="otherPage"><a href="/computer/dashboard/<%= computer.computerID %>" role="button" class="btn btn-outline-secondary" style="display: block;">Go back</a></label>
                        

                    </div>
                </div>
                
            </div>
            <div class="col-9">
                <h1 class="col-sm" style="min-height: 30vh; text-align: center;">  General informations and statistic </h1>
                <div class="row" id="container-infos-general1">

                </div>
                <div class="row" id="container-infos-general2">

                </div>
                <div class="row" id="container-infos-general3">

                </div>
                
           

                <div class="row" id="moyenne_cpu_freq">
                    <div id="Moyenne_cpu" class="canvas"></div>
                    <div id="Moyenne_ram" class="canvas"></div>                   
                    <div id="Moyenne_vram" class="canvas"></div>
                </div>
           
                <div class="row" id="moyenne_others">
       
                </div>
                
           
             
        <%- include('../partials/footer'); %>

            </div>
        </div>
    </div>

</body>

<!-- On importe SocketIO, Axios et Chart.js -->
<script src="https://cdn.socket.io/4.4.1/socket.io.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.plot.ly/plotly-2.16.5.js" charset="utf-8"></script>




<script>

    const socketHost = "<%= socketHost %>:<%= listenPort %>"
    const computer = JSON.parse('<%- JSON.stringify(computer) %>')
    const socket = io(`${socketHost}?computerID=${computer.computerID}`)
    const charts = []

    window.onload = async function(){
        // Create charts : 
        
        let div_computer_infos1=document.querySelector("#container-infos-general1")
        let div_computer_infos2=document.querySelector("#container-infos-general2")

        let div_computer_infos3=document.querySelector("#container-infos-general3")

       let max_freq_cpu=0
       let min_freq_cpu=0
       let max_amount_ram=0
       let min_amount_ram=0
       let max_amount_vram=0
       let bool_gpu=false
        axios.get('/api/computer/complete/'+computer.computerID)
            .then(function (response) {
                data=response["data"]
                max_freq_cpu=data["CPU"]["maxFrequency"]
                min_freq_cpu=data["CPU"]["minFrequency"]
                max_amount_ram=data["amountRAM"]
                max_amount_vram=data["amountVRAM"]
                let affiche=""
                affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='alert alert-dismissible alert-primary' data-bs-dismiss='alert'> PC Name : "+data["computerName"]+" </div></div></div>"
                affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='alert alert-dismissible alert-primary' data-bs-dismiss='alert'>  OS Name : "+data["osName"]+" </div></div></div>"
                affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='alert alert-dismissible alert-primary' data-bs-dismiss='alert'> Amount of RAM : "+Math.round( data["amountRAM"]/10000000)/100+" GO </div></div></div>"
                div_computer_infos1.innerHTML=affiche
                affiche=""
                affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='alert alert-dismissible alert-primary' data-bs-dismiss='alert'> CPU Name : "+data["CPU"]["CPUname"]+" </div></div></div>"
                affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='alert alert-dismissible alert-primary' data-bs-dismiss='alert'>  Number of core : "+data["CPU"]["coreNumber"]+" </div></div></div>"
                affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='alert alert-dismissible alert-primary' data-bs-dismiss='alert'> Maximum Frequency  "+data["CPU"]["maxFrequency"]+" GHz and Minmum Frequency "+data["CPU"]["minFrequency"]+" GHz</div></div></div>"
               
                
                div_computer_infos2.innerHTML=affiche

                if(data["GPUname"]!="0"){
                    bool_gpu=true
                    affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='alert alert-dismissible alert-primary' data-bs-dismiss='alert'> GPU :  "+data["GPUname"]+" </div></div></div>"
                    affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='alert alert-dismissible alert-primary' data-bs-dismiss='alert'>  Amount of Vram  : "+data["amountVRAM"]+" </div></div></div>"
               
                }
                
                
            })
            .catch(function (error) {
                // handle error
                console.log(error);
            })
        
           
            date_debut="2010-01-01"
            time_debut="00:00:00"
            let now=new Date()
            month_end=now.getMonth()+1
            date_end=""+now.getFullYear()+"-"+month_end+"-"+now.getDate()
            time_end=""+now.getHours()+":"+now.getMinutes()+":"+now.getSeconds()
            
            let div_moy_cpu=document.querySelector("#Moyenne_cpu")
            let div_moy_ram=document.querySelector("#Moyenne_ram")
            let div_moy_vram=document.querySelector("#Moyenne_vram")

            let div_moyenne_others=document.querySelector("#moyenne_others")



        
            axios.get('/api/monitor/interval/'+computer.computerID+'/'+date_debut+'/'+time_debut+'/'+date_end+'/'+time_end+'')
            .then(function (response) {
                data=response["data"]
                
                console.log(data)
                let lenght_l=0
                let moy_cpu=0
                let moy_ram=0
                let moy_vram=0
                for (let elem of data){
                    moy_cpu+=elem["CPUfreq"]
                    moy_ram+=elem["RAMusage"]
                    moy_vram+=elem["VRAMusage"]
                    lenght_l+=1
                }

                let moy_freq_cpu=(moy_cpu/lenght_l)
                /*var data = [{
                    values: [moy_freq_cpu,reste],
                    labels: ['Moyenne Fr√©quence cpu sur les 12 dernieres heures','Frequence CPU Max'],
                    type: 'pie'
                }];*/
                let pourcentage_cpu=Math.round((moy_freq_cpu/max_freq_cpu)*100)
                var data_chart_cpu_average = [
                    {
                        domain: { x: [0,100],y:[0,100]},
                        value: pourcentage_cpu,
                        title: { text: "Average percentage of CPU frequence" },
                        type: "indicator",
                        mode: "gauge+number",
                        number: { suffix: "%" },
                        gauge: {
                            axis: { range: [0, 100] },
                            steps: [
                                { range: [0,50], color: "green" },
                                { range: [50, 90], color: "orange" },
                                { range: [90, 100], color: "red" }
                            ],
                            bar: { color: "black" },
                            
                            }
                    }
                ];

       
    
                let moy_amount_ram=(moy_ram/lenght_l)
                let pourcentage_ram=Math.round((moy_amount_ram/max_amount_ram)*100)
                var data_chart_ram_average = [
                    {
                        domain: { x: [0,100],y:[0,100]},
                        value: pourcentage_ram,
                        title: { text: "Average percentage of RAM usage" },
                        type: "indicator",
                        mode: "gauge+number",
                        number: { suffix: "%" },
                        gauge: {
                            axis: { range: [0, 100] },
                            steps: [
                                { range: [0,50], color: "green" },
                                { range: [50, 90], color: "orange" },
                                { range: [90, 100], color: "red" }
                            ],
                            bar: { color: "black" },
                            
                            }
                    }
                ];
                var layout = { width: 550, height: 400, margin: { t: 25, b: 50} };

                
                Plotly.newPlot(div_moy_cpu,data_chart_cpu_average,layout);
                Plotly.newPlot(div_moy_ram,data_chart_ram_average,layout);

                if(bool_gpu==true){
                    let moy_amount_vram=(moy_vram/lenght_l)
                    let pourcentage_vram=Math.round((moy_amount_vram/max_amount_vram)*100)
                        var data_chart_vram_average = [
                        {
                            domain: { x: [0,100],y:[0,100]},
                            value: pourcentage_vram,
                            title: { text: "Average percentage of VRAM usage" },
                            type: "indicator",
                            mode: "gauge+number",
                            number: { suffix: "%" },
                            gauge: {
                                axis: { range: [0, 100] },
                                steps: [
                                    { range: [0,50], color: "green" },
                                    { range: [50, 90], color: "orange" },
                                    { range: [90, 100], color: "red" }
                                ],
                                bar: { color: "black" },
                                
                                }
                        }
                    ];
                    var layout = { width: 550, height: 400, margin: { t: 25, b: 50} };
                    Plotly.newPlot(div_moy_vram,data_chart_vram_average,layout);
                }


                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




                let affiche=[]
                let moy_thread=0
                let moy_process=0
                let moy_gpu_temp=0
                let compte=0
          
                for(let elem of data){
                 
                    moy_thread+=elem["nbThreads"]
                    moy_process+=elem["nbProcesses"]
                    moy_gpu_temp+=elem["GPUtemp"]
                    compte+=1
                }
  
                moyenne_thread=Math.round((moy_thread/compte))
                moyenne_processes=Math.round((moy_process/compte))
                moyenne_gpu_temp=Math.round((moy_gpu_temp/compte))
                let array_temp=[moyenne_thread,moyenne_processes,moyenne_gpu_temp]
                let array_res=[]
                let condition1=0
                let condition2=0
   
                for (let index = 0; index < array_temp.length; index++) {
                    
                    class_div=""
                    class_div_progress=""
                    if(index==0){
                        condition1=4000
                        condition2=7000
    
                    }
                    else if(index==1){
                        condition1=400
                        condition2=550
                    }
                    else{
                        condition1=60
                        condition2=90
                    }
                   

                    if(array_temp[index]<=condition1){
                        class_div="alert alert-dismissible alert-success"
                        class_div_progress="progress-bar bg-success"

                    }
                    else if(array_temp[index]>condition1 && array_temp[index]<=condition2){
                        class_div="alert alert-dismissible alert-warning"
                        class_div_progress="progress-bar bg-warning"
                    }
                    else{
                        class_div="alert alert-dismissible alert-danger"
                        class_div_progress="progress-bar bg-danger"
                    }

                    if(index==0){
                        width_bar=Math.round((array_temp[index]/(condition2+100))*100)                
                        progresse_bar="<div class='progress' ><div class='"+class_div_progress+"' style='width: "+width_bar+"%' role='progressbar' aria-valuenow="+array_temp[index]+" aria-valuemin="+0+" aria-valuemax="+105+"></div></div>"
                        affiche.push("<div class='col-lg-4' ><div class='bs-component' ><div class='"+class_div+"' data-bs-dismiss='alert'> Average Number of threads : "+array_temp[index]+" </div></div>"+progresse_bar+"</div>" )

                    }
                    else if( index==1){
                        width_bar=Math.round((array_temp[index]/(condition2+1000))*100)                
                        progresse_bar="<div class='progress' ><div class='"+class_div_progress+"' style='width: "+width_bar+"%' role='progressbar' aria-valuenow="+array_temp[index]+" aria-valuemin="+0+" aria-valuemax="+105+"></div></div>"
                        affiche.push("<div class='col-lg-4' ><div class='bs-component' ><div class='"+class_div+"' data-bs-dismiss='alert'> Average Number of processes  : "+array_temp[index]+" </div></div>"+progresse_bar+"</div>" )

                    }else{
                        width_bar=Math.round((array_temp[index]/(condition2+15))*100)                
                        progresse_bar="<div class='progress' ><div class='"+class_div_progress+"' style='width: "+width_bar+"%' role='progressbar' aria-valuenow="+array_temp[index]+" aria-valuemin="+0+" aria-valuemax="+105+"></div></div>"
                        affiche.push("<div class='col-lg-4' ><div class='bs-component' ><div class='"+class_div+"' data-bs-dismiss='alert'> Average Temperature of the GPU : "+array_temp[index]+" ¬∞C </div></div>"+progresse_bar+"</div>" )

                    }

                  

                }
           
                

                div_moyenne_others.innerHTML+=affiche[0]
                div_moyenne_others.innerHTML+=affiche[1]
                if(bool_gpu==true && affiche[2]!=0){
                    div_moyenne_others.innerHTML+=affiche[2]
                }





                

                

               
                
            })
            .catch(function (error) {
                // handle error
                console.log(error);
            })


            let div_moyenne_core=document.querySelector("#moyenne_others")

            axios.get('/api/corestatus/interval/'+computer.computerID+'/'+date_debut+'/'+time_debut+'/'+date_end+'/'+time_end+'') 
            .then(function (response) {
                data=response["data"]
                
                console.log(data)
                let affiche=""
                let moy_temp=0
                let moy_usage=0
                let compte=0
          
                for(let elem of data){
                 
                    moy_temp+=elem["coreTemp"]
                    moy_usage+=elem["coreUsage"]
                    compte+=1
                }
  
                moyenne_temp=Math.round((moy_temp/compte))
                moyenne_usage=Math.round((moy_usage/compte))
                class_div_temp=""
                class_div_progress_temp=""
        

                if(moyenne_temp<=60 ){
                    class_div_temp="alert alert-dismissible alert-success"
                    class_div_progress_temp="progress-bar bg-success"

                }
                else if(moyenne_temp>60 && moyenne_temp<=90){
                    class_div_temp="alert alert-dismissible alert-warning"
                    class_div_progress_temp="progress-bar bg-warning"
                }
                else{
                    class_div_temp="alert alert-dismissible alert-danger"
                    class_div_progress_temp="progress-bar bg-danger"
                }
                width_bar_temp=Math.round((moyenne_temp/105)*100)

                

                progresse_bar_temp="<div class='progress' ><div class='"+class_div_progress_temp+"' style='width: "+width_bar_temp+"%' role='progressbar' aria-valuenow="+moyenne_temp+" aria-valuemin="+0+" aria-valuemax="+105+"></div></div>"



                affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='"+class_div_temp+"' data-bs-dismiss='alert'> Average Temperature of CPU  : "+moyenne_temp+" ¬∞C </div></div>"+progresse_bar_temp+"</div>"
                div_moyenne_core.innerHTML+=affiche


                class_div_usage=""
                class_div_progress_usage=""
                if(moyenne_usage<=60 ){
                    class_div_usage="alert alert-dismissible alert-success"
                    class_div_progress_usage="progress-bar bg-success"

                }
                else if(moyenne_usage>60 && moyenne_temp<=usage){
                    class_div_usage="alert alert-dismissible alert-warning"
                    class_div_progress_usage="progress-bar bg-warning"
                }
                else{
                    class_div_usage="alert alert-dismissible alert-danger"
                    class_div_progress_usage="progress-bar bg-danger"
                }
                width_bar_usage=Math.round((moyenne_usage/100)*100)

                

                progresse_bar_usage="<div class='progress' ><div class='"+class_div_progress_usage+"' style='width: "+width_bar_usage+"%' role='progressbar' aria-valuenow="+moyenne_usage+" aria-valuemin="+0+" aria-valuemax="+100+"></div></div>"



                affiche+="<div class='col-lg-4' ><div class='bs-component' ><div class='"+class_div_usage+"' data-bs-dismiss='alert'> Average Percentage of Usage of CPU  : "+moyenne_usage+" % </div></div>"+progresse_bar_usage+"</div>"
                div_moyenne_core.innerHTML+=affiche




               
            })
        

        // Socket Connection
        socket.on("welcome", function(data) {
            console.log("Connection made");
        })

        /*socket.on("corestatuschannel", function(data){
            const corestatus = JSON.parse(data);
            coreData.push(corestatus);
         
            cpuTempsDisplay.push(corestatus)
            coreTempsDisplay.push(corestatus)
            cpuUsageDisplay.push(corestatus, cpuUsageOption.checked)
            
            // TODO: Display CPU Usage
        })

        socket.on("monitorchannel", async function(data){
            // TODO: What to do when a new monitor is received
            const monitor = JSON.parse(data);
            monitorData.push(monitor);
            console.log(monitor)
            ramUsageDisplay.push(monitor)
        })*/
    }
</script>
</html>